import java.util.Scanner

/**
 * ## 6359번, 만취한 상범
 * ### 분류 : 다이나믹 프로그래밍
 * ### 풀이
 * - 문 개폐 상태를 기억하는 1차원 배열을 준비한다.
 * - 순회하면서 문 개폐 상태를 변경한다.
 * - 제시된 케이스까지 반복문을 실행하면서 개폐 상태를 카운팅한다.
 * ### 다른 풀이
 * - 수학적으로 접근하는 방법이 있으며, 이를 이용하면 더 간결하게 해결할 수 있다.
 * - 목표치까지 약수의 개수가 홀수인 수를 카운팅한다.
 * - 더 생각해보면 제시된 케이스 이하의 완전제곱수의 개수를 찾는 문제로 해석된다.(단, 0 제외)
 */
class Main {
    companion object {
        @JvmStatic fun main(args: Array<String>) = with(Scanner(System.`in`)) {
            val T = nextInt()
            val cases = IntArray(T)
            var longestCase = 0

            for (i in 0 until T) {
                cases[i] = nextInt()
                longestCase = Math.max(longestCase, cases[i])
            }

            val dp = BooleanArray(longestCase)

            for (i in 1..longestCase) {
                for (j in i - 1 until longestCase step i) {
                    dp[j] = !dp[j]
                }
            }

            cases.forEach {
                var count = 0

                for (i in 0 until it) {
                    if (dp[i]) {
                        count++
                    }
                }

                println(count)
            }
        }
    }
}