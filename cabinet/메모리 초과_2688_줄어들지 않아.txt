import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String... args) {
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
				BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));) {
			int T = Integer.parseInt(reader.readLine());
			
			for (int i = 0; i < T; i++) {
				int n = Integer.parseInt(reader.readLine());
				List<Node> prevData = null;
				List<Node> currentData = null;
				
				for (int j = 0; j < n; j++) {
					currentData = new ArrayList<>();
					
					if (j == 0) {
						currentData.add(new Node(0));
						currentData.add(new Node(1));
						currentData.add(new Node(2));
						currentData.add(new Node(3));
						currentData.add(new Node(4));
						currentData.add(new Node(5));
						currentData.add(new Node(6));
						currentData.add(new Node(7));
						currentData.add(new Node(8));
						currentData.add(new Node(9));
					} else {
						for (Node parent : prevData) {
							int lastDigit = Integer.parseInt(parent.data.substring(parent.data.length() - 1));
							
							if (lastDigit <= 0) {
								Node node = new Node(parent.data + 0);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 1) {
								Node node = new Node(parent.data + 1);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 2) {
								Node node = new Node(parent.data + 2);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 3) {
								Node node = new Node(parent.data + 3);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 4) {
								Node node = new Node(parent.data + 4);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 5) {
								Node node = new Node(parent.data + 5);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 6) {
								Node node = new Node(parent.data + 6);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 7) {
								Node node = new Node(parent.data + 7);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 8) {
								Node node = new Node(parent.data + 8);
								
								currentData.add(node);
							}
							
							if (lastDigit <= 9) {
								Node node = new Node(parent.data + 9);
								
								currentData.add(node);
							}
						}
					}
					
					prevData = currentData;
				}

				writer.write("" + currentData.size() + "\n");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	static class Node {
		String data = "";
		
		Node(int digit) {
			data += digit;
		}
		
		Node(String data) {
			this.data = data;
		}
	}
}
