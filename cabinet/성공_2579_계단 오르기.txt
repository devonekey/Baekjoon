import java.util.*

/**
 * ## 2579번, 계단 오르기
 * ### 분류 : 다이나믹 프로그래밍
 * ### 풀이
 * - 특정 계단을 밟았을 때 얻을 수 있는 최댓값을 구하는 문제로 "연속된 세 개의 계단을 밟아선 안된다"라는 조건을 점화식에 녹여내는 것이 최대 관건이다.
 * - 특정 계단 x에서의 최댓값(score(x))은 x에 따라 다음과 같이 표현함으로써 해결할 수 있다.
 * ```
 * 0일 때 stairs(0)
 * 1일 때 stairs(1) + stairs(0)
 * 2일 때 stairs(2) + if (stairs[1] > stairs[0]) stairs[1] else stairs[0]
 * 그 외 stairs(x) + if (stairs[x - 1] + score[x - 3] > score[x - 2]) stairs[x - 1] + score[x - 3] else score[x - 2]
 * ```
 */
class Main {
    companion object {
        @JvmStatic fun main(args: Array<String>) = with(Scanner(System.`in`)) {
            val N = nextInt()
            val stairs = IntArray(N).apply {
                for (i in 0 until N) {
                    this[i] = nextInt()
                }
            }

            println(IntArray(N).apply {
                if (N > 0) {
                    this[0] = stairs[0]
                }

                if (N > 1) {
                    this[1] = stairs[1] + stairs[0]
                }

                if (N > 2) {
                    this[2] = stairs[2] + if (stairs[1] > stairs[0]) stairs[1] else stairs[0]
                }

                for (i in 3 until N) {
                    this[i] = stairs[i] + if (stairs[i - 1] + this[i - 3] > this[i - 2])
                        stairs[i - 1] + this[i - 3] else this[i - 2]
                }
            }[N - 1])
        }
    }
}